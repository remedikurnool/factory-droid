// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  phone         String   @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole @default(CUSTOMER)
  isVerified    Boolean  @default(false)
  walletBalance Float    @default(0)
  loyaltyPoints Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  addresses          Address[]
  prescriptions      Prescription[]
  orders             Order[]
  cartItems          CartItem[]
  labBookings        LabBooking[]
  appointments       Appointment[]
  serviceBookings    ServiceBooking[]
  ambulanceRequests  AmbulanceRequest[]
  bloodRequests      BloodRequest[]
  insurancePurchases InsurancePurchase[]
  payments           Payment[]
  notifications      Notification[]

  @@index([email])
  @@index([phone])
  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  STAFF
  PARTNER
  DOCTOR
}

model Address {
  id           String  @id @default(uuid())
  userId       String
  type         String
  fullName     String
  phone        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  pincode      String
  landmark     String?
  isDefault    Boolean @default(false)

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders          Order[]
  labBookings     LabBooking[]
  serviceBookings ServiceBooking[]

  @@index([userId])
  @@map("addresses")
}

// Medicine Management
model MedicineCategory {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  medicines   Medicine[]

  @@index([slug])
  @@map("medicine_categories")
}

model Brand {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  logo        String?
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  medicines   Medicine[]

  @@index([slug])
  @@map("brands")
}

model Medicine {
  id                     String   @id @default(uuid())
  name                   String
  genericName            String
  brandId                String
  categoryId             String
  description            String   @db.Text
  composition            String
  manufacturer           String
  isPrescriptionRequired Boolean  @default(false)
  price                  Float
  discountPrice          Float?
  stock                  Int      @default(0)
  unit                   String
  images                 String[]
  isFeatured             Boolean  @default(false)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  brand     Brand            @relation(fields: [brandId], references: [id])
  category  MedicineCategory @relation(fields: [categoryId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]

  @@index([name])
  @@index([genericName])
  @@index([brandId])
  @@index([categoryId])
  @@index([isFeatured])
  @@map("medicines")
}

// Lab Tests
model LabCategory {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  labTests    LabTest[]

  @@map("lab_categories")
}

model LabTest {
  id                       String      @id @default(uuid())
  name                     String
  slug                     String      @unique
  categoryId               String
  description              String      @db.Text
  price                    Float
  discountPrice            Float?
  preparationInstructions  String?     @db.Text
  reportDeliveryTime       String
  sampleType               String
  isFasting                Boolean     @default(false)
  isHomeSampleCollection   Boolean     @default(true)
  isActive                 Boolean     @default(true)
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt

  category   LabCategory @relation(fields: [categoryId], references: [id])
  bookings   LabBookingTest[]

  @@index([slug])
  @@index([categoryId])
  @@map("lab_tests")
}

model LabPartner {
  id          String       @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  pincode     String
  phone       String
  email       String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  labBookings LabBooking[]

  @@map("lab_partners")
}

model LabBooking {
  id              String         @id @default(uuid())
  userId          String
  partnerId       String
  slotDate        DateTime
  slotTime        String
  addressId       String
  totalAmount     Float
  status          BookingStatus  @default(PENDING)
  paymentId       String?
  prescriptionUrl String?
  reportUrl       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user    User       @relation(fields: [userId], references: [id])
  partner LabPartner @relation(fields: [partnerId], references: [id])
  address Address    @relation(fields: [addressId], references: [id])
  tests   LabBookingTest[]

  @@index([userId])
  @@index([status])
  @@map("lab_bookings")
}

model LabBookingTest {
  id         String     @id @default(uuid())
  bookingId  String
  testId     String

  booking LabBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  test    LabTest    @relation(fields: [testId], references: [id])

  @@unique([bookingId, testId])
  @@map("lab_booking_tests")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// Doctors & Hospitals
model Hospital {
  id          String   @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  pincode     String
  phone       String
  email       String
  specialties String[]
  facilities  String[]
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  doctors Doctor[]

  @@index([city])
  @@map("hospitals")
}

model Doctor {
  id              String   @id @default(uuid())
  name            String
  specialization  String
  qualification   String
  experience      Int
  hospitalId      String?
  consultationFee Float
  image           String?
  bio             String?  @db.Text
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  hospital     Hospital?     @relation(fields: [hospitalId], references: [id])
  appointments Appointment[]

  @@index([specialization])
  @@map("doctors")
}

model Appointment {
  id               String            @id @default(uuid())
  userId           String
  doctorId         String
  appointmentDate  DateTime
  appointmentTime  String
  status           AppointmentStatus @default(SCHEDULED)
  symptoms         String?           @db.Text
  prescriptionUrl  String?
  consultationNotes String?          @db.Text
  amount           Float
  paymentId        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  doctor Doctor @relation(fields: [doctorId], references: [id])

  @@index([userId])
  @@index([doctorId])
  @@index([status])
  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Homecare & Services
model ServiceCategory {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  description String?
  image       String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  services    HomecareService[]

  @@map("service_categories")
}

model HomecareService {
  id                      String   @id @default(uuid())
  name                    String
  description             String   @db.Text
  categoryId              String
  price                   Float
  duration                String
  isSubscriptionAvailable Boolean  @default(false)
  image                   String?
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  category         ServiceCategory    @relation(fields: [categoryId], references: [id])
  subscriptionPlans SubscriptionPlan[]
  bookings         ServiceBooking[]

  @@index([categoryId])
  @@map("homecare_services")
}

model SubscriptionPlan {
  id        String  @id @default(uuid())
  serviceId String
  name      String
  duration  Int
  frequency String
  price     Float
  savings   Float

  service HomecareService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("subscription_plans")
}

model ServiceBooking {
  id            String        @id @default(uuid())
  userId        String
  serviceId     String
  addressId     String
  scheduledDate DateTime
  scheduledTime String
  status        BookingStatus @default(PENDING)
  amount        Float
  paymentId     String?
  notes         String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user    User            @relation(fields: [userId], references: [id])
  service HomecareService @relation(fields: [serviceId], references: [id])
  address Address         @relation(fields: [addressId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("service_bookings")
}

// Emergency Services
model AmbulanceRequest {
  id                   String        @id @default(uuid())
  userId               String
  patientName          String
  patientAge           Int
  emergencyType        String
  pickupAddress        String
  pickupLatitude       Float
  pickupLongitude      Float
  destinationAddress   String
  destinationLatitude  Float
  destinationLongitude Float
  status               RequestStatus @default(PENDING)
  driverId             String?
  vehicleNumber        String?
  estimatedArrival     DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("ambulance_requests")
}

model BloodRequest {
  id              String        @id @default(uuid())
  userId          String
  bloodGroup      String
  units           Int
  hospitalName    String
  hospitalAddress String
  urgency         String
  patientName     String
  contactNumber   String
  status          RequestStatus @default(PENDING)
  donorId         String?
  notes           String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([bloodGroup])
  @@index([status])
  @@map("blood_requests")
}

enum RequestStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Insurance
model InsurancePlan {
  id             String    @id @default(uuid())
  name           String
  provider       String
  coverageAmount Float
  premium        Float
  duration       Int
  features       String[]
  terms          String?   @db.Text
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  purchases InsurancePurchase[]

  @@map("insurance_plans")
}

model InsurancePurchase {
  id              String   @id @default(uuid())
  userId          String
  planId          String
  nomineeName     String
  nomineeRelation String
  nomineeAge      Int
  startDate       DateTime
  endDate         DateTime
  premium         Float
  status          String   @default("active")
  policyNumber    String   @unique
  documentUrl     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User          @relation(fields: [userId], references: [id])
  plan InsurancePlan @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([policyNumber])
  @@map("insurance_purchases")
}

// Cart & Orders
model CartItem {
  id                   String   @id @default(uuid())
  userId               String
  productId            String
  productType          String
  quantity             Int      @default(1)
  price                Float
  prescriptionRequired Boolean  @default(false)
  prescriptionUrl      String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicine Medicine? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("cart_items")
}

model Order {
  id                String        @id @default(uuid())
  userId            String
  orderNumber       String        @unique
  subtotal          Float
  tax               Float
  deliveryCharge    Float
  discount          Float         @default(0)
  total             Float
  addressId         String
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  paymentId         String?
  orderStatus       OrderStatus   @default(PENDING)
  prescriptionUrls  String[]
  invoiceUrl        String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([orderStatus])
  @@map("orders")
}

model OrderItem {
  id            String  @id @default(uuid())
  orderId       String
  productId     String
  productType   String
  productName   String
  quantity      Int
  price         Float
  discountPrice Float?
  total         Float

  order    Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  medicine Medicine? @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  PACKED
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  RAZORPAY
  UPI
  CARD
  NETBANKING
  WALLET
  COD
}

// Payments
model Payment {
  id                 String        @id @default(uuid())
  orderId            String?
  bookingId          String?
  userId             String
  amount             Float
  method             PaymentMethod
  status             PaymentStatus @default(PENDING)
  transactionId      String?
  razorpayOrderId    String?
  razorpayPaymentId  String?
  razorpaySignature  String?
  failureReason      String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("payments")
}

// Prescriptions
model Prescription {
  id        String   @id @default(uuid())
  userId    String
  fileUrl   String
  fileName  String
  uploadedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("prescriptions")
}

// Notifications
model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false)
  link      String?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

enum NotificationType {
  ORDER
  BOOKING
  PAYMENT
  OFFER
  GENERAL
}

// Marketing
model Banner {
  id          String   @id @default(uuid())
  title       String
  description String?
  image       String
  link        String?
  position    Int
  isActive    Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("banners")
}

model Offer {
  id             String   @id @default(uuid())
  title          String
  description    String   @db.Text
  code           String   @unique
  discountType   String
  discountValue  Float
  minOrderValue  Float
  maxDiscount    Float?
  usageLimit     Int?
  usedCount      Int      @default(0)
  validFrom      DateTime
  validTo        DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([code])
  @@map("offers")
}

model Coupon {
  id                    String   @id @default(uuid())
  code                  String   @unique
  description           String   @db.Text
  discountType          String
  discountValue         Float
  minOrderValue         Float
  maxDiscount           Float?
  usageLimit            Int
  usedCount             Int      @default(0)
  userLimit             Int      @default(1)
  validFrom             DateTime
  validTo               DateTime
  isActive              Boolean  @default(true)
  applicableCategories  String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([code])
  @@map("coupons")
}
