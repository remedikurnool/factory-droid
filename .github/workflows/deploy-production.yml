name: Deploy to Production

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://api.onemedi.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: cd packages/database && pnpm prisma generate

      - name: Build Backend
        run: cd apps/backend && pnpm run build

      - name: Run Database Migrations
        run: cd packages/database && pnpm prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      # Example: Deploy to Railway
      - name: Deploy to Railway
        run: |
          echo "Deploying backend to Railway..."
          # Add Railway CLI deployment commands here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        continue-on-error: true

      # Example: Deploy to AWS/DigitalOcean/other platforms
      # Uncomment and configure based on your deployment target

      # - name: Deploy to AWS EC2
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       cd /app/backend
      #       git pull
      #       pnpm install --frozen-lockfile
      #       pnpm run build
      #       pm2 restart backend

      - name: Health check
        run: |
          echo "Performing health check..."
          sleep 10
          curl -f https://api.onemedi.com/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Backend deployed successfully to ${{ github.event.inputs.environment || 'production' }}"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://onemedi.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Frontend
        run: cd apps/frontend && pnpm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}

      # Example: Deploy to Vercel
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_FRONTEND_PROJECT_ID }}
          working-directory: apps/frontend
          vercel-args: '--prod'
        continue-on-error: true

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Frontend deployed successfully to ${{ github.event.inputs.environment || 'production' }}"

  deploy-admin:
    name: Deploy Admin Panel
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://admin.onemedi.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Admin Panel
        run: cd apps/admin && pnpm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}

      # Example: Deploy to Vercel
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_ADMIN_PROJECT_ID }}
          working-directory: apps/admin
          vercel-args: '--prod'
        continue-on-error: true

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Admin panel deployed successfully to ${{ github.event.inputs.environment || 'production' }}"

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-admin]
    if: always()
    
    steps:
      - name: Send Slack notification
        if: success()
        run: |
          echo "Sending Slack notification..."
          # Add Slack webhook notification here
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Deployment Summary
            - Backend: ${{ needs.deploy-backend.result }}
            - Frontend: ${{ needs.deploy-frontend.result }}
            - Admin: ${{ needs.deploy-admin.result }}
          draft: false
          prerelease: false

      - name: Deployment summary
        run: |
          echo "üìä Deployment Summary"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo "Admin: ${{ needs.deploy-admin.result }}"
          
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && \
             [ "${{ needs.deploy-frontend.result }}" == "success" ] && \
             [ "${{ needs.deploy-admin.result }}" == "success" ]; then
            echo "‚úÖ All deployments successful!"
          else
            echo "‚ùå One or more deployments failed"
          fi
